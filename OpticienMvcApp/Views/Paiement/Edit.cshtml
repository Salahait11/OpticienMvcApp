@model OpticienMvcApp.PAIEMENT

@{
    ViewBag.Title = "Modifier le paiement";
}

<div class="container-fluid px-4 py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold" style="color: var(--primary-color);">
            <i class="fa fa-edit me-2" style="color: var(--accent-color);"></i>
            @ViewBag.Title
        </h2>
        @Html.ActionLink("Retour à la liste", "Index", null, 
            new { @class = "btn shadow-sm", 
                  style = "border-color: var(--accent-color); color: var(--accent-color);" })
    </div>

    @if (Model != null && Model.OperationVente != null)
    {
        <div class="card shadow-sm border-0 mb-4">
            <div class="card-header bg-white py-3">
                <h5 class="mb-0 fw-bold">
                    <i class="fa fa-info-circle me-2" style="color: var(--accent-color);"></i>
                    Détails de l'Opération de Vente
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="text-muted mb-1">Numéro d'Opération</label>
                            <p class="fw-bold mb-0">@Html.DisplayFor(model => model.OperationVente.NumeroOp)</p>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="text-muted mb-1">Date de l'Opération</label>
                            <p class="fw-bold mb-0">@Html.DisplayFor(model => model.OperationVente.DateDeVente)</p>
                        </div>
                    </div>
                    @if (Model.OperationVente.Client != null)
                    {
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="text-muted mb-1">Client</label>
                                <p class="fw-bold mb-0">@Html.DisplayFor(model => model.OperationVente.Client.Nom)</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.ID)

        <div class="card shadow-sm border-0">
            <div class="card-body p-4">
                @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DatePaiement, htmlAttributes: new { @class = "form-label fw-bold" })
                            <div class="input-group">
                                <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                @Html.TextBoxFor(model => model.DatePaiement, 
                                    "{0:yyyy-MM-dd}", 
                                    new { @class = "form-control", type = "date" })
                            </div>
                            @Html.ValidationMessageFor(model => model.DatePaiement, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ModeDePaiement, htmlAttributes: new { @class = "form-label fw-bold" })
                            <div class="input-group">
                                <span class="input-group-text"><i class="fa fa-credit-card"></i></span>
                                @Html.EditorFor(model => model.ModeDePaiement, 
                                    new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.ModeDePaiement, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.MontantPaye, htmlAttributes: new { @class = "form-label fw-bold" })
                            <div class="input-group">
                                <span class="input-group-text"><i class="fa fa-coins"></i></span>
                                <input type="number" 
                                       name="MontantPaye" 
                                       id="MontantPaye" 
                                       value="@Model.MontantPaye.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)"
                                       class="form-control" 
                                       step="0.01" 
                                       min="0" 
                                       required="required" />
                            </div>
                            @Html.ValidationMessageFor(model => model.MontantPaye, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.OpVenteID, "Opération de Vente", htmlAttributes: new { @class = "form-label fw-bold" })
                            <div class="input-group">
                                <span class="input-group-text"><i class="fa fa-shopping-cart"></i></span>
                                @Html.DropDownList("OpVenteID", null, 
                                    new { @class = "form-select" })
                            </div>
                            @Html.ValidationMessageFor(model => model.OpVenteID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ReferencePaiement, htmlAttributes: new { @class = "form-label fw-bold" })
                            <div class="input-group">
                                <span class="input-group-text"><i class="fa fa-hashtag"></i></span>
                                @Html.EditorFor(model => model.ReferencePaiement, 
                                    new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.ReferencePaiement, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-end gap-2 mt-4">
                    <input type="submit" value="Enregistrer" class="btn shadow-sm" 
                           style="background-color: var(--accent-color); border-color: var(--accent-color); color: white;" />
                </div>
            </div>
        </div>
    }
</div>

<style>
    .form-control, .form-select {
        border-radius: 8px;
        border: 1px solid #dee2e6;
        padding: 0.5rem 1rem;
        transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
        border-color: var(--accent-color);
        box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
    }

    .input-group-text {
        background-color: var(--accent-color);
        border-color: var(--accent-color);
        color: white;
    }

    .btn {
        transition: all 0.3s ease;
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .card {
        border-radius: 12px;
        overflow: hidden;
    }

    .card-header {
        border-bottom: 1px solid rgba(0,0,0,0.05);
    }
</style>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function() {
            // Animation d'entrée pour les cartes
            $('.card').css({
                'opacity': '0',
                'transform': 'translateY(20px)'
            }).animate({
                'opacity': '1',
                'transform': 'translateY(0)'
            }, 500);
        });
    </script>
}