@model OpticienMvcApp.Produit

@{
    ViewBag.Title = "Modifier le produit";
}

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-12">
            <div class="card shadow-sm rounded-lg border-0 hover-card">
                <div class="card-body p-4">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2 class="card-title mb-0" style="color: var(--primary-color);">
                            <i class="fa fa-edit me-2" style="color: var(--accent-color);"></i>
                            @ViewBag.Title
                        </h2>
                    </div>

                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
                        @Html.HiddenFor(model => model.ID)

                        <div class="card mb-4 border-0 shadow-sm">
                            <div class="card-header bg-white">
                                <h4 class="mb-0" style="color: var(--primary-color);">
                                    <i class="fa fa-cube me-2" style="color: var(--accent-color);"></i>
                                    Informations Générales
                                </h4>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Reference, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-barcode"></i></span>
                                                @Html.EditorFor(model => model.Reference, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.Reference, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-tag"></i></span>
                                                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CategorieID, "Catégorie", htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-tags"></i></span>
                                                @{
                                                    var categories = ViewBag.CategorieID as SelectList;
                                                    var selectedValue = Model.CategorieID.ToString();
                                                }
                                                <select name="CategorieID" id="CategorieID" class="form-control" onchange="toggleDetails()">
                                                    <option value="">-- Sélectionner une catégorie --</option>
                                                    @foreach (var item in categories)
                                                    {
                                                        <option value="@item.Value" @(item.Value == selectedValue ? "selected" : "")>
                                                            @item.Text
                                                        </option>
                                                    }
                                                </select>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.CategorieID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Fabricant, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-industry"></i></span>
                                                @Html.EditorFor(model => model.Fabricant, new { htmlAttributes = new { @class = "form-control" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.Fabricant, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.PrixUnitaire, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-euro-sign"></i></span>
                                                <input type="text" 
                                                       name="PrixUnitaire" 
                                                       id="PrixUnitaire" 
                                                       value="@Model.PrixUnitaire.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)"
                                                       class="form-control" 
                                                       required="required"
                                                       pattern="^\d*\.?\d*$" />
                                            </div>
                                            @Html.ValidationMessageFor(model => model.PrixUnitaire, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.TauxTVA, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-percent"></i></span>
                                                <input type="text" 
                                                       name="TauxTVA" 
                                                       id="TauxTVA" 
                                                       value="@Model.TauxTVA.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)"
                                                       class="form-control" 
                                                       required="required"
                                                       pattern="^\d*\.?\d*$" />
                                            </div>
                                            @Html.ValidationMessageFor(model => model.TauxTVA, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Actif, htmlAttributes: new { @class = "form-label" })
                                            <div class="form-check form-switch">
                                                @Html.EditorFor(model => model.Actif, new { htmlAttributes = new { @class = "form-check-input" } })
                                                @Html.ValidationMessageFor(model => model.Actif, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Détails Monture -->
                        <div id="montureDetails" class="card mb-4" style="display: none;">
                            <div class="card-header">
                                <h5 class="mb-0">Détails de la Monture</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.DetailMonture.Marque, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-tag"></i></span>
                                                @Html.EditorFor(model => model.DetailMonture.Marque, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DetailMonture.Marque, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.DetailMonture.Modele, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-barcode"></i></span>
                                                @Html.EditorFor(model => model.DetailMonture.Modele, new { htmlAttributes = new { @class = "form-control" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DetailMonture.Modele, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.DetailMonture.Couleur, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-palette"></i></span>
                                                @Html.EditorFor(model => model.DetailMonture.Couleur, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DetailMonture.Couleur, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.DetailMonture.Taille, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-ruler"></i></span>
                                                @Html.EditorFor(model => model.DetailMonture.Taille, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DetailMonture.Taille, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.DetailMonture.Materiau, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-cube"></i></span>
                                                @Html.EditorFor(model => model.DetailMonture.Materiau, new { htmlAttributes = new { @class = "form-control" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DetailMonture.Materiau, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.DetailMonture.Genre, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-user"></i></span>
                                                @Html.EditorFor(model => model.DetailMonture.Genre, new { htmlAttributes = new { @class = "form-control" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DetailMonture.Genre, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Détails Verre -->
                        <div id="verreDetails" class="card mb-4" style="display: none;">
                            <div class="card-header">
                                <h5 class="mb-0">Détails du Verre</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.DetailVerre.TypeTraitement, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-glasses"></i></span>
                                                @Html.EditorFor(model => model.DetailVerre.TypeTraitement, new { htmlAttributes = new { @class = "form-control" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DetailVerre.TypeTraitement, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.DetailVerre.Indice, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-hashtag"></i></span>
                                                @Html.EditorFor(model => model.DetailVerre.Indice, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0.01" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DetailVerre.Indice, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.DetailVerre.DiametrePrecal, htmlAttributes: new { @class = "form-label" })
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa fa-circle"></i></span>
                                                @Html.EditorFor(model => model.DetailVerre.DiametrePrecal, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0.1" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DetailVerre.DiametrePrecal, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group text-center">
                            <button type="submit" class="btn btn-lg hover-btn me-2" style="background-color: var(--accent-color); border-color: var(--accent-color); color: white;">
                                <i class="fa fa-save me-2"></i>Sauvegarder
                            </button>
                            @Html.ActionLink("Retour à la liste", "Index", null, new { @class = "btn btn-lg btn-outline-secondary hover-btn" })
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .hover-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .hover-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
    }

    .hover-btn {
        transition: all 0.3s ease;
    }

    .hover-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(52, 152, 219, 0.2) !important;
    }

    .form-label {
        font-weight: 500;
        color: var(--secondary-color);
        margin-bottom: 0.5rem;
    }

    .input-group-text {
        background-color: var(--accent-color);
        color: white;
        border: none;
    }

    .form-control, .form-select {
        border: 1px solid #dee2e6;
        transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
        border-color: var(--accent-color);
        box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
    }

    .card {
        transition: all 0.3s ease;
    }

    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
    }

    .form-check-input:checked {
        background-color: var(--accent-color);
        border-color: var(--accent-color);
    }
</style>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        function toggleDetails() {
            var categorieId = document.getElementById('CategorieID').value;
            var montureDetails = document.getElementById('montureDetails');
            var verreDetails = document.getElementById('verreDetails');

            // Cacher les deux sections par défaut
            montureDetails.style.display = 'none';
            verreDetails.style.display = 'none';

            // Afficher la section appropriée selon la catégorie
            if (categorieId === '1') { // ID de la catégorie Monture
                montureDetails.style.display = 'block';
                // Initialiser les champs de monture si nécessaire
                if (!document.getElementById('DetailMonture_Marque').value) {
                    document.getElementById('DetailMonture_Marque').value = '';
                }
                if (!document.getElementById('DetailMonture_Modele').value) {
                    document.getElementById('DetailMonture_Modele').value = '';
                }
                if (!document.getElementById('DetailMonture_Couleur').value) {
                    document.getElementById('DetailMonture_Couleur').value = '';
                }
                if (!document.getElementById('DetailMonture_Taille').value) {
                    document.getElementById('DetailMonture_Taille').value = '';
                }
                if (!document.getElementById('DetailMonture_Materiau').value) {
                    document.getElementById('DetailMonture_Materiau').value = '';
                }
                if (!document.getElementById('DetailMonture_Genre').value) {
                    document.getElementById('DetailMonture_Genre').value = '';
                }
            } else if (categorieId === '2') { // ID de la catégorie Verre
                verreDetails.style.display = 'block';
                // Initialiser les champs de verre si nécessaire
                if (!document.getElementById('DetailVerre_TypeTraitement').value) {
                    document.getElementById('DetailVerre_TypeTraitement').value = '';
                }
                if (!document.getElementById('DetailVerre_Indice').value) {
                    document.getElementById('DetailVerre_Indice').value = '';
                }
                if (!document.getElementById('DetailVerre_DiametrePrecal').value) {
                    document.getElementById('DetailVerre_DiametrePrecal').value = '';
                }
            }
        }

        // Exécuter au chargement de la page
        document.addEventListener('DOMContentLoaded', function() {
            toggleDetails();
        });

        $(document).ready(function () {
            // Fonction pour formater les nombres
            function formatNumber(input) {
                // Remplacer la virgule par un point
                let value = input.value.replace(',', '.');
                // Supprimer tous les caractères non numériques sauf le point
                value = value.replace(/[^\d.]/g, '');
                // S'assurer qu'il n'y a qu'un seul point
                let parts = value.split('.');
                if (parts.length > 2) {
                    value = parts[0] + '.' + parts.slice(1).join('');
                }
                // Limiter à 2 décimales
                if (parts.length > 1) {
                    value = parts[0] + '.' + parts[1].substring(0, 2);
                }
                input.value = value;
            }

            // Appliquer le formatage lors de la saisie
            $('#PrixUnitaire, #TauxTVA').on('input', function() {
                formatNumber(this);
            });

            // Valider et convertir avant la soumission du formulaire
            $('form').on('submit', function(e) {
                e.preventDefault();

                let prix = $('#PrixUnitaire').val();
                let tva = $('#TauxTVA').val();

                // Convertir les valeurs en nombres
                prix = prix.replace(',', '.');
                tva = tva.replace(',', '.');

                // Mettre à jour les champs avec les valeurs converties
                $('#PrixUnitaire').val(prix);
                $('#TauxTVA').val(tva);

                // Soumettre le formulaire
                this.submit();
            });
        });
    </script>
}
